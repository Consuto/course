To create a more realistic and non-uniform model of all the other loads in a residence requires a more complex description of the residential loads.  Open up "residential_load_other_loads.glm" and take a look at one way this could be done in GridLAB-D.

Near the top of the file you'll see two particular statements that set-up this model:
<pre>
module residential{
	implicit_enduses NONE;
};

#include "appliance_schedules.glm";
</pre>

The first statement turns off all the <tt>implcit_enduses</tt>; if we left did nothing else the only load in each house would be the HVAC unit with no energy being consumed when the HVAC was off. To replace all those other loads we're going to use a combination of ZIP loads (xxxxxxx link), schedules (xxxxxxx link) and a new statement called <tt>schedule_skew</tt>.

First, to explain a tiny bit <tt>#include</tt> is a simple way to split up models into multiple files. It is entirely possible to never use them and simply put the entire model definition, all ten, twenty, or one hundred thousand lines in a single file; that has been done. The other extreme, which also is done, is to make the main model file a list of <tt>#include</tt>s with virtually not other content in that file. Which definitions go in which files is somewhat a matter of style but there is a strong case to made to seperate out parts of the model that do lend themselves to modularity. In this case, having a single file that defines appliance schedules is very convenient as it can be copied and used by multiple models simply by <tt>#include</tt>-ing it. 

Opening up "appliance_schedules.glm", as the name implies, a number of scheulde definitions for each appliance. Remember schedules (xxxxxxx link) are defined by indicating what time of day and week a the referenced object will take on the given value. For example, looking at the first definition in the file for <tt>LIGHTS</tt>, we see that during all minutes, when the hour is zero, during months 4 though 9 (April through September), when the day of the week is 1-5 (Monday through Friday), the value of <tt>LIGHTS</tt> takes a value of 0.380. The comment in the schedule file, <tt>weekday-summer</tt> matches this definition and we can see that there are unique values defined for each hour of the day and four blocks to describe weekend and weekday summer and winter. In addition to the load definition for <tt>LIGHTS</tt>, we have <tt>PLUGS</tt>, <tt>CLOTHESWASHER</tt> <tt>REFRIGERATOR</tt>, <tt>DRYER</tt>, <tt>FREEZER</tt>, <tt>DISHWASHER</tt>, <tt>RANGE</tt> and <tt>MICROWAVE/tt>, the most common <tt>implcit_enduses</tt> loads we turned off.

Having these definitions for appliance usage patterns is great but we still have to put them to use in the main model file; here is where ZIP loads come in handy. In "residential_load_other_loads.glm" jump down to where the first house (<tt>b1m1_house</tt>) is defined and you'll see after all the statements you've seen before describing the thermodynamic properties of the house is a list of <tt>ZIPload</tt>s parented to the house object. Each of these <tt>ZIPload</tt>s references one of the schedules defined for a given load type (<tt>PLUGS</tt>, <tt>CLOTHESWASHER</tt> <tt>REFRIGERATOR</tt>, etc) and then multiples that referenced value by a specific factor. In this way, a common hourly time-series of values can be modified for each particular residence.

The other way these common schedules are customized for each residence is through the use of [[Object (directive)#schedule_skew|schedule_skew]]. The <tt>schedule_skew</tt> statement, as the name implies, allows the pre-defined timing of a schedule to be shifted in time so that the object takes on the specified value but does so some amount of time earlier or later than defined in the schedule. For examples, we can see in <tt>b1m1_house</tt>, all the <tt>ZIPload</tt>s that use the schedules have a <tt>schedule_skew</tt> of -685, indicating they will take on the scheduled values 685 seconds (about 11.5 minutes) earlier than is indicated in the "appliance_schedules.glm" file. 

With all the <tt>implcit_enduses</tt> loads in the model now defined uniquely, both respective to the amount of energy and the timing of the energy, we would expect the total load of the feeder to look more diversified and smoothed out in time. In fact, you may have noticed that we have taken out the HVAC system in all the residences of this model so we can more clearly see the difference. Running the model with and without the <tt>implicit_enduses NONE;</tt> and <tt>ZIPload</tt>s in all the houses commented out shows us just the difference in these methods of modeling these types of loads.

(xxxxxxx insert graph)

Using the  <tt>ZIPload</tt>s and <tt>schedule_skew</tt> results in a much smoother load shape, even when only running a system with six houses. The difference in magnitude may or may not be appropriate; it would be up to the modeler to determine if the factors used when scaling the base values define the in "appliance_schedules.glm" are realistic or not.